// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostHandlerFunc turns a function with the right signature into a post handler
type PostHandlerFunc func(PostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostHandlerFunc) Handle(params PostParams) middleware.Responder {
	return fn(params)
}

// PostHandler interface for that can handle valid post params
type PostHandler interface {
	Handle(PostParams) middleware.Responder
}

// NewPost creates a new http.Handler for the post operation
func NewPost(ctx *middleware.Context, handler PostHandler) *Post {
	return &Post{Context: ctx, Handler: handler}
}

/* Post swagger:route POST / post

Post post API

*/
type Post struct {
	Context *middleware.Context
	Handler PostHandler
}

func (o *Post) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostBody post body
//
// swagger:model PostBody
type PostBody struct {

	// Connection string for sql commands. This will be used for all commands and has to be URL-encoded.
	// Example: pg://myuser:mypwd@MYDATABAESERVER:5432
	// Required: true
	Connection *string `json:"connection"`

	// List of sql commands. Commands can use interpolation:<br/> query: select * from table where id = :'ID'<br/> args: ID=123
	//
	// Example: {"args":["KEY=1"],"query":"select * from mytable where key = :'KEY'"}
	Queries []*PostParamsBodyQueriesItems0 `json:"queries"`
}

// Validate validates this post body
func (o *PostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBody) validateConnection(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"connection", "body", o.Connection); err != nil {
		return err
	}

	return nil
}

func (o *PostBody) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(o.Queries) { // not required
		return nil
	}

	for i := 0; i < len(o.Queries); i++ {
		if swag.IsZero(o.Queries[i]) { // not required
			continue
		}

		if o.Queries[i] != nil {
			if err := o.Queries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post body based on the context it is used
func (o *PostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBody) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Queries); i++ {

		if o.Queries[i] != nil {
			if err := o.Queries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBody) UnmarshalBinary(b []byte) error {
	var res PostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostOKBody post o k body
// Example: {"queries":[{"result":[{"id":123,"name":"John"}],"success":true},{"result":"INSERT 1","success":true}]}
//
// swagger:model PostOKBody
type PostOKBody struct {

	// queries
	Queries []*PostOKBodyQueriesItems0 `json:"queries"`
}

// Validate validates this post o k body
func (o *PostOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOKBody) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(o.Queries) { // not required
		return nil
	}

	for i := 0; i < len(o.Queries); i++ {
		if swag.IsZero(o.Queries[i]) { // not required
			continue
		}

		if o.Queries[i] != nil {
			if err := o.Queries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postOK" + "." + "queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postOK" + "." + "queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post o k body based on the context it is used
func (o *PostOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOKBody) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Queries); i++ {

		if o.Queries[i] != nil {
			if err := o.Queries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postOK" + "." + "queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postOK" + "." + "queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOKBody) UnmarshalBinary(b []byte) error {
	var res PostOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostOKBodyQueriesItems0 post o k body queries items0
//
// swagger:model PostOKBodyQueriesItems0
type PostOKBodyQueriesItems0 struct {

	// result
	Result interface{} `json:"result,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this post o k body queries items0
func (o *PostOKBodyQueriesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post o k body queries items0 based on context it is used
func (o *PostOKBodyQueriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOKBodyQueriesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOKBodyQueriesItems0) UnmarshalBinary(b []byte) error {
	var res PostOKBodyQueriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostParamsBodyQueriesItems0 post params body queries items0
//
// swagger:model PostParamsBodyQueriesItems0
type PostParamsBodyQueriesItems0 struct {

	// args
	// Example: ARG=myarg
	Args []string `json:"args"`

	// query
	// Example: select * from table where value = :'ARG'
	Query string `json:"query,omitempty"`
}

// Validate validates this post params body queries items0
func (o *PostParamsBodyQueriesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post params body queries items0 based on context it is used
func (o *PostParamsBodyQueriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostParamsBodyQueriesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostParamsBodyQueriesItems0) UnmarshalBinary(b []byte) error {
	var res PostParamsBodyQueriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
